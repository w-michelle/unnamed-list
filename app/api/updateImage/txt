const {
  S3Client,
  GetObjectCommand,
  PutObjectCommand,
} = require("@aws-sdk/client-s3");

const s3Client = new S3Client();
const bucketName = "your-bucket-name";
const objectKey = "your-image-file.jpg";

// Step 1: Get the existing image
const getObjectParams = {
  Bucket: bucketName,
  Key: objectKey,
};

const existingImageData = await s3Client.send(
  new GetObjectCommand(getObjectParams)
);

// Step 2: Modify the image (e.g., using an image processing library)

// Step 3: Put the updated image back in the S3 bucket, overwriting the old version
const putObjectParams = {
  Bucket: bucketName,
  Key: objectKey, // Same key as the existing image
  Body: modifiedImageData, // Provide the modified image data here
};

const response = await s3Client.send(new PutObjectCommand(putObjectParams));

console.log("Updated image successfully:", response);


const { PrismaClient } = require('@prisma/client');
const { S3Client, GetObjectCommand, PutObjectCommand } = require('@aws-sdk/client-s3');

const prisma = new PrismaClient();
const s3Client = new S3Client();

const updateImageAndDatabase = async (imageId, updatedImageData) => {
  try {
    // Step 1: Retrieve the database record
    const existingRecord = await prisma.image.findUnique({
      where: {
        id: imageId,
      },
    });

    if (!existingRecord) {
      throw new Error(`Image with ID ${imageId} not found.`);
    }

    // Step 2: Update the database record (modify as needed)
    const updatedRecord = await prisma.image.update({
      where: {
        id: imageId,
      },
      data: {
        // Update fields as needed
        description: 'Updated description',
        // ...
      },
    });

    // Step 3: Upload the updated image to S3 (as described in the previous response)
    const s3Bucket = 'your-bucket-name';
    const s3ObjectKey = 'your-image-file.jpg';

    const putObjectParams = {
      Bucket: s3Bucket,
      Key: s3ObjectKey,
      Body: updatedImageData,
    };

    const s3Response = await s3Client.send(new PutObjectCommand(putObjectParams));

    // Step 4: Update the database record with the new S3 URL
    await prisma.image.update({
      where: {
        id: imageId,
      },
      data: {
        s3Url: `https://${s3Bucket}.s3.amazonaws.com/${s3ObjectKey}`,
        // ...
      },
    });

    console.log('Updated image and database record successfully:', updatedRecord);
  } catch (error) {
    console.error('Error updating image and database record:', error);
  } finally {
    await prisma.$disconnect(); // Close Prisma client connection
  }
};

// Example usage
const imageIdToUpdate = 1;
const updatedImageDataBuffer = ...; // Updated image data as a Buffer or Stream

updateImageAndDatabase(imageIdToUpdate, updatedImageDataBuffer);

#2 delete the cache 
https://www.youtube.com/watch?v=lZAGIy1e3JA&t=20s&ab_channel=SamMeech-Ward